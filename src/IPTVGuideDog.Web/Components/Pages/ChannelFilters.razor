@page "/channels"
@using System.Linq
@using IPTVGuideDog.Core.Channels
@using IPTVGuideDog.Web.Application
@inject IChannelCatalog ChannelCatalog
@inject ChannelWorkspaceState Workspace

<PageTitle>Channel Filters</PageTitle>

<MudPaper Class="pa-6" Elevation="1">
    <MudText Typo="Typo.h5" Class="mb-2">Channel Filters</MudText>
    <MudText Typo="Typo.body2">Choose which channel groups flow through to your downstream systems. Selections are applied in real time.</MudText>
</MudPaper>

@if (_isLoading)
{
    <MudProgressCircular Indeterminate="true" Class="mt-6" />
}
else if (_groups.Count == 0)
{
    <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Class="mt-6">
        No groups discovered yet. Confirm socket host connectivity and refresh.
    </MudAlert>
}
else
{
    <MudPaper Class="pa-4 mt-6" Elevation="1">
        <MudStack Spacing="2">
            @foreach (var group in _groups)
            {
                <MudCheckBox T="bool" Value="group.IsSelected" ValueChanged="value => UpdateSelection(group, value)" Label="@($"{group.Name} ({group.ChannelCount})")" />
            }
        </MudStack>
    </MudPaper>
}

@code {
    private readonly List<GroupViewModel> _groups = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var groups = await ChannelCatalog.GetGroupsAsync();
        _groups.Clear();
        _groups.AddRange(groups.Select(g => new GroupViewModel(g.Name, g.Channels.Count, Workspace.IsSelected(g.Name))));
        _isLoading = false;
    }

    private void UpdateSelection(GroupViewModel group, bool isChecked)
    {
        group.IsSelected = isChecked;

        var currentlySelected = Workspace.IsSelected(group.Name);
        if (isChecked && !currentlySelected)
        {
            Workspace.ToggleGroup(group.Name);
        }
        else if (!isChecked && currentlySelected)
        {
            Workspace.ToggleGroup(group.Name);
        }
    }

    private sealed class GroupViewModel
    {
        public GroupViewModel(string name, int channelCount, bool isSelected)
        {
            Name = name;
            ChannelCount = channelCount;
            IsSelected = isSelected;
        }

        public string Name { get; }
        public int ChannelCount { get; }
        public bool IsSelected { get; set; }
    }
}
